{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/simoneM05/smui/refs/heads/main/recipe/tooltip.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/tooltip.tsx",
      "type": "registry:ui",
      "content": "import * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider data-slot='tooltip-provider' delayDuration={delayDuration} {...props} />\n  );\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot='tooltip' {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot='tooltip-trigger' {...props} />;\n}\n\nconst tooltipVariants = cva('inline-block rounded-md text-medium px-4 py-1.5 text-sm', {\n  variants: {\n    variant: {\n      dark: 'bg-background border border-border shadow-black/5 shadow-md text-foreground',\n      light: 'dark:border dark:border-border bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black shadow-md shadow-black/5',\n    },\n  },\n  defaultVariants: {\n    variant: 'light',\n  },\n});\n\nfunction TooltipContent({ className, sideOffset = 4, variant, ...props }: React.ComponentProps<typeof TooltipPrimitive.Content> & VariantProps<typeof tooltipVariants>) {\n  return (\n    <TooltipPrimitive.Content data-slot='tooltip-content' sideOffset={sideOffset} className={cn(tooltipVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "type": "registry:lib",
      "content": "import { clsx, type ClassValue } from 'clsx'\n;import { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]): string {\nreturn twMerge(clsx(inputs));\n}\n"
    }
  ]
}
