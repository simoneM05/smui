{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/simoneM05/smui/refs/heads/main/recipe/avatar.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/avatar.tsx",
      "type": "registry:ui",
      "content": "'use client';\nimport * as React from 'react';\nimport * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cn } from '@/lib/utils';\nimport { cva } from 'class-variance-authority';\nimport { motion, MotionProps } from 'motion/react';\ntype AvatarSize = 'sm' | 'md' | 'lg';\ntype AvatarRounded = 'none' | 'sm' | 'md' | 'lg' | 'full';\nconst AvatarVariant = cva('inline-flex items-center justify-center text-sm font-medium overflow-hidden', { variants: { size: { sm: 'h-6 w-6 text-xs', md: 'h-10 w-10 text-sm', lg: 'h-14 w-14 text-lg' }, rounded: { none: 'rounded-none', sm: 'rounded-sm', md: 'rounded-md', lg: 'rounded-lg', full: 'rounded-full' } }, defaultVariants: { size: 'md', rounded: 'full' } });\ninterface AvatarProps extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> { size?: AvatarSize; rounded?: AvatarRounded; className?: string; motionProps?: MotionProps }\nfunction Avatar({ className, size, rounded, motionProps, ...props }: AvatarProps) {\nreturn (<motion.div className='inline-flex' {...motionProps}><AvatarPrimitive.Root data-slot='avatar' className={cn(AvatarVariant({ size, rounded }), className)} {...props} /></motion.div>);\n}\nfunction AvatarImage({ className, ...props }: React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> & { size?: AvatarSize; rounded?: AvatarRounded }) {\nreturn (<AvatarPrimitive.Image data-slot='avatar-image' className={cn('aspect-square h-full w-full object-cover', className)} {...props} />);\n}\nfunction AvatarFallback({ className, size, rounded, ...props }: React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback> & { size?: AvatarSize; rounded?: AvatarRounded }) {\nreturn (<AvatarPrimitive.Fallback data-slot='avatar-fallback' className={cn(AvatarVariant({ size, rounded }), 'flex items-center justify-center bg-muted font-semibold', className)} {...props} />);\n}\nexport { Avatar, AvatarImage, AvatarFallback };"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "type": "registry:lib",
      "content": "import { clsx, type ClassValue } from 'clsx'\n;import { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]): string {\nreturn twMerge(clsx(inputs));\n}\n"
    }
  ]
}
