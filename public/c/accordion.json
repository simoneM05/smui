{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "dependencies": [
    "radix-ui",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": ["https://example.com/path/to/your/registry.json"],
  "files": [
    {
      "path": "registry/default/ui/accordion.tsx",
      "type": "registry:ui",
      "content": "'use client';\nimport * as React from 'react';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { ChevronDownIcon, PlusIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// ================= Variants per Accordion Root =================\nconst accordionVariants = cva('w-full py-4 px-2 border-border rounded-lg ', {\n  variants: {\n    variant: {\n      default: '',\n      primary: 'border-primary text-primary',\n      secondary: 'border-secondary text-secondary',\n      destructive: 'border-destructive text-destructive',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// ================= Variants per AccordionItem =================\nconst accordionItemVariants = cva('transition-all rounded-lg p-2 m-2', {\n  variants: {\n    variant: {\n      indicator:\n        'relative rounded-none [&::after]:content-['']  [&::after]:block [&::after]:h-0.5 [&::after]:bg-border [&::after]:absolute [&::after]:left-1 [&::after]:right-1 [&::after]:bottom-0',\n      solid: 'dark:bg-accent/40 bg-accent',\n      outline: 'border-2',\n      ghost: 'hover:bg-accent/40',\n    },\n  },\n  defaultVariants: {\n    variant: 'solid',\n  },\n});\n\n// ================= Variants per AccordionHeader =================\nconst accordionHeaderVariants = cva('flex', {\n  variants: {\n    variant: {\n      default: '',\n      primary: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// ================= Variants per AccordionTrigger =================\nconst accordionTriggerVariants = cva(\n  'flex flex-1 items-center justify-between py-2 gap-2.5 text-foreground font-medium transition-all [&[data-state=open]>svg]:rotate-180 cursor-pointer',\n  {\n    variants: {\n      variant: {\n        default: '',\n        primary: '',\n      },\n      indicator: {\n        arrow: '',\n        plus: '[&>svg>path:last-child]:origin-center [&>svg>path:last-child]:transition-all [&>svg>path:last-child]:duration-200 [&[data-state=open]>svg>path:last-child]:rotate-90',\n        none: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      indicator: 'arrow',\n    },\n  }\n);\n\n// ================= Variants per AccordionContent =================\nconst accordionContentVariants = cva(\n  'overflow-hidden duration-300 text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down mt-2 transition-all duration-300',\n  {\n    variants: {\n      variant: {\n        default: '',\n        primary: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\n// ================= Accordion Root =================\ntype AccordionProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Root\n> &\n  VariantProps<typeof accordionVariants>;\n\nfunction Accordion({ className, children, variant, ...props }: AccordionProps) {\n  return (\n    <AccordionPrimitive.Root\n      className={cn(accordionVariants({ variant }), className)}\n      {...props}\n    >\n      {children}\n    </AccordionPrimitive.Root>\n  );\n}\n\n// ================= Accordion Item =================\ntype AccordionItemProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Item\n> &\n  VariantProps<typeof accordionItemVariants>;\n\nfunction AccordionItem({\n  className,\n  children,\n  variant,\n  ...props\n}: AccordionItemProps) {\n  return (\n    <AccordionPrimitive.Item\n      className={cn(accordionItemVariants({ variant }), className)}\n      {...props}\n    >\n      {children}\n    </AccordionPrimitive.Item>\n  );\n}\n\n// ================= Accordion Header =================\ntype AccordionHeaderProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Header\n> &\n  VariantProps<typeof accordionHeaderVariants>;\n\nfunction AccordionHeader({\n  className,\n  children,\n  variant,\n  ...props\n}: AccordionHeaderProps) {\n  return (\n    <AccordionPrimitive.Header\n      className={cn(accordionHeaderVariants({ variant }), className)}\n      {...props}\n    >\n      {children}\n    </AccordionPrimitive.Header>\n  );\n}\n\n// ================= Accordion Trigger =================\ntype AccordionTriggerProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Trigger\n> &\n  VariantProps<typeof accordionTriggerVariants>;\n\nfunction AccordionTrigger({\n  className,\n  variant,\n  indicator = 'arrow',\n  children,\n  ...props\n}: AccordionTriggerProps) {\n  return (\n    <AccordionPrimitive.Trigger\n      data-slot='accordion-trigger'\n      className={cn(\n        accordionTriggerVariants({ variant, indicator }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {indicator === 'arrow' && (\n        <ChevronDownIcon\n          className='size-4 shrink-0 transition-transform duration-200'\n          strokeWidth={1}\n        />\n      )}\n\n      {indicator === 'plus' && (\n        <PlusIcon\n          className='size-4 shrink-0 transition-transform duration-200'\n          strokeWidth={1}\n        />\n      )}\n    </AccordionPrimitive.Trigger>\n  );\n}\n\n// ================= Accordion Content =================\ntype AccordionContentProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Content\n> &\n  VariantProps<typeof accordionContentVariants> & {\n    padded?: boolean;\n  };\n\nfunction AccordionContent({\n  className,\n  children,\n  padded = false,\n  ...props\n}: AccordionContentProps) {\n  return (\n    <AccordionPrimitive.Content {...props} asChild>\n      <div className={cn(accordionContentVariants({}), className)}>\n        <div className={cn(padded && 'pb-4 pt-0')}>{children}</div>\n      </div>\n    </AccordionPrimitive.Content>\n  );\n}\n\n// ================= Export =================\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n};"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "type": "registry:lib",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n"
    }
  ]
}
