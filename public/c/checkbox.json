{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox",
  "type": "registry:ui",
  "dependencies": [
    "radix-ui",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/simoneM05/smui/refs/heads/main/recipe/checkbox.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/checkbox.tsx",
      "type": "registry:ui",
      "content": "'use client';\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Copy, CopyCheck } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Slot } from '@radix-ui/react-slot';\n\nconst codeVariants = cva('relative rounded-md bg-muted text-sm font-mono font-medium', {\n  variants: {\n    variant: {\n      default: 'bg-muted text-muted-foreground',\n      destructive: 'bg-destructive/10 text-destructive',\n      outline: 'bg-background border-border border text-foreground',\n    },\n    size: {\n      default: 'text-sm px-2.5 py-1.5',\n      sm: 'text-xs px-2 py-1',\n      lg: 'text-base px-3 py-1.5',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n    size: 'default',\n  },\n});\n\ninterface CodeProps extends React.HTMLAttributes<HTMLElement>, VariantProps<typeof codeVariants> {\n  asChild?: boolean;\n  showCopyButton?: boolean;\n  copyText?: string;\n}\n\nexport function Code({ className, children, variant, size, asChild = false, showCopyButton = false, copyText, ...props }: CodeProps) {\n  const [copy, copied] = React.useState(false);\n  const Comp = asChild ? Slot : 'code';\n  const textToCopy = copyText || (typeof children === 'string' && children);\n\n  return (\n    <span className={cn(className, 'inline-flex items-center gap-2')} data-slot='code'>\n      <Comp data-slot='code-element' className={cn(codeVariants({ variant, size }))} {...props}>\n        {children}\n      </Comp>\n      {showCopyButton && textToCopy && (\n        <Button apparance={'ghost'} size='icon' className='h-4 w-4 p-0 opacity-60 hover:opacity-100' onClick={() => { navigator.clipboard.writeText(textToCopy); copied(true); setTimeout(() => copied(false), 1000); }}>\n          {copy ? <CopyCheck size={4} /> : <Copy size={4} />}\n        </Button>\n      )}\n    </span>\n  );\n}"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "type": "registry:lib",
      "content": "import { clsx, type ClassValue } from 'clsx'\n;import { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]): string {\nreturn twMerge(clsx(inputs));\n}\n"
    }
  ]
}
