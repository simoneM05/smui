{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/simoneM05/smui/refs/heads/main/recipe/card.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/card.tsx",
      "type": "registry:ui",
      "content": "'use client';\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\ntype CardContextType = { variant: 'default' | 'accent' };\nconst CardContext = React.createContext<CardContextType>({ variant: 'default' });\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) throw new Error('useCardContext must be used within a Card component');\n  return context;\n};\n\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: { variant: { default: 'border border-border shadow-xs black/5', accent: 'bg-muted shadow-xs p-1' } },\n  defaultVariants: { variant: 'default' },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: { variant: { default: 'border-b border-border', accent: '' } },\n  defaultVariants: { variant: 'default' },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: { variant: { default: '', accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl' } },\n  defaultVariants: { variant: 'default' },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: { variant: { default: '', accent: 'bg-card rounded-xl' } },\n  defaultVariants: { variant: 'default' },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: { variant: { default: 'border-t border-border', accent: 'bg-card rounded-b-xl mt-[2px]' } },\n  defaultVariants: { variant: 'default' },\n});\n\nfunction Card({ className, variant = 'default', ...props }: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot='card' className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot='card-header' className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot='card-content' className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot='card-table' className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot='card-footer' className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot='card-title' className={cn('text-lg font-semibold leading-none tracking-tight', className)} {...props} />;\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot='card-description' className={cn('text-muted-foreground text-sm', className)} {...props} />;\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent, CardTable };"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "type": "registry:lib",
      "content": "import { clsx, type ClassValue } from 'clsx'\n;import { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]): string {\nreturn twMerge(clsx(inputs));\n}\n"
    }
  ]
}
