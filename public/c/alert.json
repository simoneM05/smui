{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "dependencies": [
    "radix-ui",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/simoneM05/smui/refs/heads/main/recipe/alert.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/alert.tsx",
      "type": "registry:ui",
      "content": "'use client';\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\nimport { X } from 'lucide-react';\nimport { Button } from './button';\n\nconst alertVariants = cva(\n  'relative rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current transition-opacity duration-200',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-card text-card-foreground [&_svg:not([class*=size-])]:size-4',\n        destructive:\n          'text-foreground font-medium border-destructive/60 bg-destructive/20 [&>svg]:text-destructive [&_svg:not([class*=size-])]:size-4',\n        success:\n          'text-success-foreground bg-success border-success   [&>svg]:text-success-icon [&_svg:not([class*=size-])]:size-4 font-medium',\n        warning:\n          'text-warning-foreground bg-warning border-warning [&>svg]:text-warning-icon  [&_svg:not([class*=size-])]:size-4 font-medium',\n        info: 'text-info-foreground bg-info border-info  [&>svg]:text-info-icon [&_svg:not([class*=size-])]:size-4 font-medium',\n      },\n      appearance: {\n        solid: 'border-transparent',\n        outline: 'border-3 bg-transparent dark:bg-transparent',\n        dashed: 'border-3 border-dashed border-border bg-transparent',\n      },\n\n      size: {\n        sm: 'px-3 py-2 text-xs min-w-48',\n        md: 'px-4 py-3 text-sm min-w-64',\n        lg: 'px-6 py-4 text-base min-w-80',\n      },\n\n      lines: {\n        single: 'items-center',\n        multiple: 'items-start',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      appearance: 'solid',\n      size: 'md',\n      lines: 'multiple',\n    },\n  }\n);\n\ntype AlertProps = React.ComponentProps<'div'> &\n  VariantProps<typeof alertVariants> & {\n    close?: boolean;\n    onClose?: () => void;\n  };\n\nexport function Alert({\n  className,\n  variant,\n  children,\n  close,\n  onClose,\n  appearance,\n  size,\n  lines,\n  ...props\n}: AlertProps) {\n  const gridCols = close\n    ? 'has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr_auto] grid-cols-[0_1fr_auto]'\n    : 'has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr]';\n\n  return (\n    <div\n      data-slot='alert'\n      role='alert'\n      aria-live='polite'\n      className={cn(\n        alertVariants({ variant, appearance, size, lines }),\n        gridCols,\n        className\n      )}\n      {...props}\n    >\n      {children}\n      {close && (\n        <Button\n          variant='invert'\n          size='sm'\n          aria-label='Close'\n          data-slot='alert-close'\n          onClick={onClose}\n          className='col-start-3 row-start-1 group shrink-0 ml-2'\n        >\n          <X className='size-4 group-hover:opacity-100 opacity-40' />\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport function AlertTitle({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot='alert-title'\n      className={cn(\n        'col-start-2 min-h-4 font-medium tracking-tight [.lines-single_&]:line-clamp-1 [.lines-single_&]:truncate',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot='alert-description'\n      className={cn(\n        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed [.lines-single_&]:line-clamp-1 [.lines-single_&]:truncate [.lines-single_&]:grid-cols-1',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function AlertToolbar({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot='alert-toolbar'\n      className={cn('col-start-2 flex gap-2 items-center mt-1', className)}\n      {...props}\n    />\n  );\n}\n\nexport function AlertContent({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot='alert-content'\n      className={cn('col-start-2 flex flex-col gap-1', className)}\n      {...props}\n    />\n  );\n}"
    },
    {
      "path": "registry/default/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 outline-none',\n  {\n    variants: {\n      variant: {\n        primary: 'text-primary-foreground bg-primary hover:bg-primary/40',\n        secondary: 'text-secondary-foreground bg-secondary hover:bg-secondary/40',\n        danger: 'text-destructive-foreground bg-destructive hover:bg-destructive/40',\n        invert: '',\n      },\n      apparance: {\n        solid: '',\n        outline: 'border-2 border-border hover:bg-accent/20 text-foreground bg-transparent',\n        link: 'bg-transparent hover:bg-trasparent text-blue-600 underline-offset-4 hover:underline',\n        dashed: 'border-2 bg-transparent border-dashed border-border',\n        ghost: 'bg-transparent',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-8.5 rounded-md [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      shape: {\n        rounded: 'rounded-lg',\n        pill: 'rounded-full',\n        square: 'rounded-none',\n      },\n      underline: {\n        true: 'underline',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      { variant: 'primary', apparance: 'outline', class: 'text-primary border-primary hover:bg-primary/10' },\n      { variant: 'secondary', apparance: 'outline', class: 'text-secondary border-secondary hover:bg-secondary/10' },\n      { variant: 'danger', apparance: 'outline', class: 'text-destructive border-destructive hover:bg-destructive/10' },\n      { variant: 'primary', apparance: 'ghost', class: 'text-primary bg-transparent hover:bg-primary/10' },\n      { variant: 'secondary', apparance: 'ghost', class: 'text-secondary bg-transparent hover:bg-secondary/10' },\n      { variant: 'danger', apparance: 'ghost', class: 'text-destructive bg-transparent hover:bg-destructive/10' },\n      { variant: 'primary', apparance: 'dashed', class: 'text-primary  border-primary hover:text-primary/70' },\n      { variant: 'secondary', apparance: 'dashed', class: 'text-secondary border-secondary hover:text-secondary/70' },\n      { variant: 'danger', apparance: 'dashed', class: 'text-destructive border-destructive hover:text-destructive/70' }\n    ],\n    defaultVariants: { variant: 'primary', apparance: 'solid', size: 'md', shape: 'rounded', underline: false }\n  }\n);\n\ntype ButtonProps = React.ComponentProps<'button'> & VariantProps<typeof buttonVariants> & { asChild?: boolean };\n\nfunction Button({ className, variant, size, apparance, underline, shape, asChild = false, ...props }: ButtonProps) {\n  const Comp = asChild ? Slot : 'button';\n  const resolvedVariant = apparance === 'outline' && !variant ? 'invert' : variant;\n\n  return (\n    <Comp\n      data-slot='button'\n      className={cn(buttonVariants({ variant: resolvedVariant, size, shape, apparance, underline, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "type": "registry:lib",
      "content": "import { clsx, type ClassValue } from 'clsx'\n;import { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]): string {\nreturn twMerge(clsx(inputs));\n}\n"
    }
  ]
}
